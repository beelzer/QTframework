[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "qt-framework"
version = "0.1.0"
description = "Modern, modular Qt application framework for Python"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "MIT"}
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
keywords = ["qt", "framework", "gui", "desktop", "application"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
dependencies = [
    "PySide6>=6.8.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",
    "typing-extensions>=4.12.0",
    "watchdog>=6.0.0",
    "pyyaml>=6.0.2",
    "python-dotenv>=1.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.15.0",
    "numpy>=2.0.0",
    "matplotlib>=3.9.0",
    "pandas>=2.2.0",
    "pip>=23.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "pytest>=8.3.0",
    "pytest-qt>=4.4.0",
    "pytest-cov>=6.0.0",
]

[project.urls]
Homepage = "https://github.com/beelzer/qt-framework"
Documentation = "https://qt-framework.readthedocs.io"
Repository = "https://github.com/beelzer/qt-framework.git"
Issues = "https://github.com/beelzer/qt-framework/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/qtframework"]

[tool.ruff]
target-version = "py313"
line-length = 100
indent-width = 4
src = ["src", "tests", "examples"]
preview = true  # Enable preview features
respect-gitignore = true
force-exclude = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "RUF",  # ruff-specific rules
    "ANN",  # flake8-annotations
    "ASYNC",# flake8-async
    "S",    # flake8-bandit (security)
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "ISC",  # flake8-implicit-str-concat
    "G",    # flake8-logging-format
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "TID",  # flake8-tidy-imports
    "YTT",  # flake8-2020
    "PERF", # Perflint (performance)
    "FURB", # refurb (modernization)
    "LOG",  # flake8-logging
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # NumPy-specific rules
    "PD",   # pandas-vet
    "FAST", # FastAPI
    "AIR",  # Airflow
    "PL",   # Pylint
    "D",    # pydocstyle
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
    "ANN101",# Missing type annotation for self
    "ANN102",# Missing type annotation for cls
    "S101",  # Use of assert detected
    "FBT001",# Boolean positional arg in function definition
    "FBT002",# Boolean default value in function definition
    "COM812",# Trailing comma missing
    "ISC001",# Implicitly concatenated string
]
fixable = ["ALL"]
unfixable = []
# Allow certain violations in specific files
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "D"]
"examples/*" = ["T201", "D"]
"__init__.py" = ["F401", "D104"]

[tool.ruff.lint.isort]
known-first-party = ["qtframework"]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true
force-single-line = false
lines-after-imports = 2
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder"
]

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
# Additional strict checks
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_reexport = true
strict_equality = true
strict_concatenate = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool"
]
plugins = [
    "pydantic.mypy"
]
exclude = [
    "build/",
    "dist/",
    ".venv/",
    "venv/",
    ".git/",
    "__pycache__/",
    "*.egg-info/"
]

[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "pandas.*",
    "numpy.*",
    "PySide6.*"
]
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=qtframework",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[dependency-groups]
dev = [
    "mypy>=1.14.1",
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "pytest-qt>=4.5.0",
    "ruff>=0.8.5",
    "types-pyyaml>=6.0.0",
    "types-setuptools>=75.0.0",
    "pandas-stubs>=2.2.0",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 7
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "examples", ".venv", "venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_with_params

[tool.pydocstyle]
convention = "google"
match-dir = "(?!tests|examples|migrations).*"
add-ignore = ["D100", "D104"]

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["qtframework"]
force_single_line = false
combine_as_imports = true
use_parentheses = true
include_trailing_comma = true
multi_line_output = 3
