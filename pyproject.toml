[build-system]
requires = ["hatchling>=1.27.0"]
build-backend = "hatchling.build"

[project]
name = "qt-framework"
version = "0.1.0"
description = "Modern, modular Qt application framework for Python"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "MIT"}
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
keywords = ["qt", "framework", "gui", "desktop", "application", "pyside6"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: User Interfaces",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
dependencies = [
    "PySide6>=6.8.1",
    "pydantic>=2.10.5",
    "pydantic-settings>=2.7.0",
    "typing-extensions>=4.13.0",
    "watchdog>=6.0.0",
    "pyyaml>=6.0.2",
    "python-dotenv>=1.0.1",
    "sqlalchemy>=2.0.36",
    "alembic>=1.15.0",
    "numpy>=2.2.1",
    "matplotlib>=3.10.0",
    "pandas>=2.2.3",
    "babel>=2.17.0",
    "polib>=1.2.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.9.0",
    "mypy>=1.14.1",
    "pytest>=8.4.0",
    "pytest-qt>=4.5.0",
    "pytest-cov>=7.0.0",
    "pytest-xdist>=3.6.1",
    "pre-commit>=4.0.1",
    "types-pyyaml>=6.0.12.20240917",
    "pandas-stubs>=2.2.3",
]
docs = [
    "sphinx>=8.1.3",
    "sphinx-pyproject>=0.3.0",  # Parse Sphinx config from pyproject.toml
    "furo>=2025.1.29",  # Modern, fast, clean theme
    "sphinx-autodoc-typehints>=2.5.0",  # Auto-document type hints
    "sphinx-copybutton>=0.5.2",  # Copy button for code blocks
    "myst-parser>=4.0.0",  # Markdown support
    "sphinx-design>=0.6.1",  # Cards, tabs, dropdowns
    "sphinxcontrib-mermaid>=1.0.0",  # Mermaid diagrams
    "sphinx-autobuild>=2025.1.17",  # Live reload for development
]

[project.urls]
Homepage = "https://github.com/beelzer/qt-framework"
Documentation = "https://qt-framework.readthedocs.io"
Repository = "https://github.com/beelzer/qt-framework.git"
Issues = "https://github.com/beelzer/qt-framework/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/qtframework"]

# Ruff - All-in-one Python linter and formatter
[tool.ruff]
target-version = "py313"
line-length = 100
indent-width = 4
src = ["src", "tests", "examples"]
fix = true
preview = true
exclude = ["docs/conf.py", "resources/**/*.py"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 80

[tool.ruff.lint]
select = [
    # Core
    "F",     # Pyflakes
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade

    # Code quality
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "EM",    # flake8-errmsg
    "PIE",   # flake8-pie
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "PGH",   # pygrep-hooks

    # Security
    "S",     # flake8-bandit

    # Performance
    "PERF",  # Perflint

    # Type annotations
    "ANN",   # flake8-annotations
    "FA",    # flake8-future-annotations

    # Best practices
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "A",     # flake8-builtins
    "C90",   # mccabe
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PT",    # flake8-pytest-style
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "TID",   # flake8-tidy-imports
    "RUF",   # Ruff-specific rules

    # Libraries
    "NPY",   # NumPy-specific rules
    "PD",    # pandas-vet

    # Documentation
    "D",     # pydocstyle

    # Modern improvements
    "FURB",  # refurb
    "LOG",   # flake8-logging
    "TRY",   # tryceratops
    "FLY",   # flynt
    "PL",    # Pylint (selective)
]
ignore = [
    # Line length (formatter handles this)
    "E501",

    # Documentation (too strict for now)
    "D100", "D101", "D102", "D103", "D104", "D105", "D107",
    "D203",  # one-blank-line-before-class (conflicts with D211)
    "D213",  # multi-line-summary-second-line (conflicts with D212)

    # Conflicts with formatter
    "COM812", "ISC001",

    # Too opinionated
    "S101",   # assert allowed
    "FBT001", "FBT002",  # Boolean args can be useful
    "EM101", "EM102",    # Raw exception strings are fine
    "TRY003",  # Long exception messages are ok
    "PLR0913", # Too many arguments (Qt often needs many)
    "PLR2004", # Magic values are sometimes clearer
    "PLC0415", # Import can be at function level for lazy loading
    "N802",    # Qt requires camelCase for override methods
    "D401",    # First line imperative mood (too strict)

    # Too strict for initial development
    "ANN",     # All type annotations optional for now
    "PLR6301", # Methods can use self even if not needed
    "G004",    # f-strings in logging are fine
    "TRY401", "TRY300", "TRY301",  # Try/except patterns
    "BLE001",  # Blind except sometimes needed
    "ARG001", "ARG002",  # Unused arguments (Qt signals)
    "B904",    # raise from not always needed
    "A002",    # Shadowing builtins sometimes ok
    "F821",    # Forward references
    "SLF001",  # Private member access within framework
    "E722",    # Bare except for cleanup
    "PLC1901", # Empty string comparison is clearer
    "PLR0911", "PLR0912", "PLR0914",  # Complexity limits too strict

    # Remaining edge cases
    "PLR1702", "PLR0904", "PLR0915",  # Complexity
    "PLW0603",  # Global statement
    "A001",     # Builtin shadowing
    "DTZ005",   # Timezone aware datetime
    "FBT003",   # Boolean positional
    "SIM102", "SIM108",  # Simplification
    "B008",     # Function call in default
    "C901",     # McCabe complexity
    "D205",     # Docstring formatting
    "FURB113",  # Refurb
    "PGH003",   # Type ignore
    "PLC0206",  # Dict iteration
    "RUF001",   # Unicode
]
fixable = ["ALL"]
unfixable = ["F401"]  # Don't auto-remove imports

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",     # assert is expected in tests
    "ARG",      # unused arguments in fixtures
    "D",        # no docstrings needed in tests
    "ANN",      # no type annotations needed in tests
    "FBT",      # boolean args ok in tests
]
"examples/**/*.py" = ["ALL"]  # Examples are for demonstration, not production
"**/__init__.py" = ["F401", "D104"]  # __init__ can re-export
"scripts/**/*.py" = ["S603", "S607", "T201"]  # Shell commands ok in scripts
"src/qtframework/navigation/router.py" = ["TC003"]
"src/qtframework/state/store.py" = ["TC003"]

[tool.ruff.lint.isort]
known-first-party = ["qtframework"]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true
lines-after-imports = 2

[tool.ruff.lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel", "sqlalchemy.orm.DeclarativeBase"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pylint]
max-args = 7  # Qt widgets often need many args
max-branches = 12
max-returns = 4
max-statements = 50

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

# MyPy - Static type checking
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
check_untyped_defs = true
no_implicit_optional = true
strict_optional = true
strict_equality = true

# Start permissive, tighten gradually
disallow_untyped_defs = false
disallow_untyped_calls = false
disallow_incomplete_defs = false
disallow_any_generics = false
ignore_missing_imports = false

# Display
pretty = true
show_error_codes = true
show_column_numbers = true
error_summary = true

# Performance
incremental = true
cache_dir = ".mypy_cache"

# Plugins
plugins = [
    "pydantic.mypy",
]

[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "pandas.*",
    "numpy.*",
    "PySide6.*",
    "polib.*",
    "watchdog.*",
    "babel.*",
    "dotenv.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*", "examples.*"]
ignore_errors = true

# Pytest - Testing
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow",
    "gui: marks tests that require GUI",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage - Test coverage
[tool.coverage.run]
source = ["src/qtframework"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@overload",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# UV - Modern Python package manager (optional but recommended)
[tool.uv]
managed = true
dev-dependencies = [
    "ruff>=0.9.0",
    "mypy>=1.14.1",
    "pytest>=8.4.0",
    "pytest-qt>=4.5.0",
    "pytest-cov>=7.0.0",
    "pre-commit>=4.0.1",
]

[tool.uv.pip]
index-url = "https://pypi.org/simple"

# Hatch - Build and environment management
[tool.hatch.envs.default]
dependencies = [
    "ruff>=0.9.0",
    "mypy>=1.14.1",
    "pytest>=8.4.0",
    "pytest-qt>=4.5.0",
    "pytest-cov>=7.0.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov {args:tests}"
lint = "ruff check {args:src tests}"
format = "ruff format {args:src tests}"
typecheck = "mypy {args:src}"
all = ["format", "lint", "typecheck", "test"]

# Documentation environment
[tool.hatch.envs.docs]
dependencies = [
    "sphinx>=8.1.3",
    "sphinx-pyproject>=0.3.0",
    "furo>=2025.1.29",
    "sphinx-autodoc-typehints>=2.5.0",
    "sphinx-copybutton>=0.5.2",
    "myst-parser>=4.0.0",
    "sphinx-design>=0.6.1",
    "sphinxcontrib-mermaid>=1.0.0",
    "sphinx-autobuild>=2025.1.17",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build docs docs/_build/html"
live = "sphinx-autobuild docs docs/_build/html --open-browser"
clean = "rm -rf docs/_build docs/api/generated"
apidoc = "sphinx-apidoc -o docs/api/generated src/qtframework --force --module-first --separate"

# Sphinx configuration via sphinx-pyproject
[tool.sphinx-pyproject]
# General configuration
master_doc = "index"
language = "en"
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]
nitpicky = true
keep_warnings = false

# Extensions
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.viewcode",
    "sphinx.ext.napoleon",
    "sphinx.ext.intersphinx",
    "sphinx.ext.todo",
    "sphinx_autodoc_typehints",
    "sphinx_copybutton",
    "myst_parser",
    "sphinx_design",
    "sphinxcontrib.mermaid",
]

# HTML output options
html_theme = "furo"
html_static_path = ["_static"]
templates_path = ["_templates"]
html_title = "QT Framework Documentation"
html_short_title = "QT Framework"
html_logo = ""
html_favicon = ""
html_show_sourcelink = true
html_show_sphinx = false
html_show_copyright = true

# Theme options are moved to conf.py to allow dynamic theme color references

# Autodoc configuration
[tool.sphinx-pyproject.autodoc_default_options]
members = true
member-order = "bysource"
special-members = "__init__"
undoc-members = true
exclude-members = "__weakref__"
show-inheritance = true

# Additional autodoc settings
autodoc_typehints = "both"
autodoc_typehints_format = "short"
autodoc_class_signature = "separated"
autodoc_preserve_defaults = true

# Napoleon settings (Google/NumPy style docstrings)
napoleon_google_docstring = true
napoleon_numpy_docstring = true
napoleon_include_init_with_doc = false
napoleon_include_private_with_doc = false
napoleon_include_special_with_doc = true
napoleon_use_admonition_for_examples = false
napoleon_use_admonition_for_notes = false
napoleon_use_admonition_for_references = false
napoleon_use_ivar = false
napoleon_use_param = true
napoleon_use_rtype = true
napoleon_preprocess_types = false

# MyST (Markdown) parser
myst_enable_extensions = [
    "deflist",
    "tasklist",
    "html_image",
    "colon_fence",
    "smartquotes",
    "replacements",
    "linkify",
    "strikethrough",
]
myst_heading_anchors = 3

# Intersphinx mapping moved to conf.py due to format requirements

# Sphinx copybutton
copybutton_prompt_text = ">>> |\\.\\.\\. |\\$ "
copybutton_prompt_is_regexp = true
copybutton_line_continuation_character = "\\"

# Mermaid diagrams
mermaid_version = "10.6.1"
mermaid_init_js = "mermaid.initialize({startOnLoad:true, theme: 'default'});"

# Todo extension
todo_include_todos = true
todo_emit_warnings = true
