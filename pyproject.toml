[build-system]
requires = ["hatchling>=1.27.0"]
build-backend = "hatchling.build"

[project]
name = "qtframework"
version = "0.1.0"
description = "Modern, modular Qt application framework for Python"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "MIT"}
authors = [
    { name = "beelzer", email = "d.j.flitcroft@gmail.com" }
]
keywords = ["qt", "framework", "gui", "desktop", "application", "pyside6"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: User Interfaces",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
dependencies = [
    "PySide6>=6.9.2",
    "pydantic>=2.12.0b1",
    "pydantic-settings>=2.11.0",
    "typing-extensions>=4.15.0",
    "watchdog>=6.0.0",
    "pyyaml>=6.0.3",
    "python-dotenv>=1.1.1",
    "sqlalchemy>=2.0.43",
    "alembic>=1.16.5",
    "numpy>=2.3.3",
    "matplotlib>=3.10.6",
    "pandas>=2.3.2",
    "babel>=2.17.0",
    "polib>=1.2.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.13.2",
    "mypy>=1.18.2",
    "pytest>=8.4.2",
    "pytest-qt>=4.5.0",
    "pytest-cov>=7.0.0",
    "pytest-xdist>=3.8.0",
    "pytest-html>=4.1.1",
    "pre-commit>=4.3.0",
    "types-pyyaml>=6.0.12.20250915",
    "pandas-stubs>=2.3.2.250827",
]
docs = [
    "sphinx>=8.2.3",
    "sphinx-pyproject>=0.3.0",  # Parse Sphinx config from pyproject.toml
    "furo>=2025.9.25",  # Modern, fast, clean theme
    "sphinx-autodoc-typehints>=3.2.0",  # Auto-document type hints
    "sphinx-copybutton>=0.5.2",  # Copy button for code blocks
    "myst-parser>=4.0.1",  # Markdown support
    "sphinx-design>=0.6.1",  # Cards, tabs, dropdowns
    "sphinxcontrib-mermaid>=1.0.0",  # Mermaid diagrams
    "sphinx-autobuild>=2025.8.25",  # Live reload for development
]

[project.urls]
Homepage = "https://github.com/beelzer/qt-framework"
Documentation = "https://beelzer.github.io/QTframework/"
Repository = "https://github.com/beelzer/qt-framework.git"
Issues = "https://github.com/beelzer/qt-framework/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/qtframework"]

# Ruff - All-in-one Python linter and formatter
# Inherits base configuration from config submodule
[tool.ruff]
extend = "config/ruff.toml"

# Project-specific overrides
[tool.ruff.lint.isort]
known-first-party = ["qtframework"]

# Project-specific per-file ignores (must include base + project-specific)
# Note: per-file-ignores don't merge, so we must repeat base config rules here
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "S105", "S110", "ARG", "D", "ANN", "FBT"]
"examples/**/*.py" = ["ALL"]
"**/__init__.py" = ["F401", "D104"]
"scripts/**/*.py" = ["S603", "S607", "T201"]
".github/scripts/**/*.py" = ["S603", "S607", "T201"]
"docs/conf.py" = ["INP001", "E402"]
"src/qtframework/navigation/router.py" = ["TC003"]
"src/qtframework/state/store.py" = ["TC003"]

# MyPy - Static type checking
# NOTE: Base configuration is in config/mypy.ini
# Run mypy with: mypy --config-file=config/mypy.ini src/
# The settings below are kept for IDE integration that reads pyproject.toml
[tool.mypy]
python_version = "3.13"
pretty = true
show_error_codes = true
show_column_numbers = true

# For full configuration, use: mypy --config-file=config/mypy.ini src/

# Pytest - Testing
# NOTE: Base configuration mirrors config/pytest.ini
# Pytest doesn't support extends, so config is duplicated here with project-specific additions
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--maxfail=3",
    "-vv",
    # Project-specific: coverage settings
    "--cov=src/qtframework",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (may be slower)",
    "slow: Slow running tests (deselect with '-m \"not slow\"')",
    "gui: Tests requiring GUI/Qt",
    "network: Tests requiring network access",
    "database: Tests requiring database",
    "performance: Performance/benchmark tests",
    "smoke: Basic smoke tests for CI",
    "regression: Regression tests for bug fixes",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ResourceWarning",
    "ignore:.*PySide6.*:DeprecationWarning",
]
qt_api = "pyside6"
qt_no_exception_capture = false

# Coverage - Test coverage
[tool.coverage.run]
source = ["src/qtframework"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@overload",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# UV - Modern Python package manager (optional but recommended)
[tool.uv]
managed = true
dev-dependencies = [
    "ruff>=0.9.0",
    "mypy>=1.14.1",
    "pytest>=8.4.0",
    "pytest-qt>=4.5.0",
    "pytest-cov>=7.0.0",
    "pre-commit>=4.0.1",
]

[tool.uv.pip]
index-url = "https://pypi.org/simple"

# Hatch - Build and environment management
[tool.hatch.envs.default]
dependencies = [
    "ruff>=0.9.0",
    "mypy>=1.14.1",
    "pytest>=8.4.0",
    "pytest-qt>=4.5.0",
    "pytest-cov>=7.0.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov {args:tests}"
lint = "ruff check {args:src tests}"
format = "ruff format {args:src tests}"
typecheck = "mypy {args:src}"
all = ["format", "lint", "typecheck", "test"]

# Documentation environment
[tool.hatch.envs.docs]
dependencies = [
    "sphinx>=8.1.3",
    "sphinx-pyproject>=0.3.0",
    "furo>=2025.1.29",
    "sphinx-autodoc-typehints>=2.5.0",
    "sphinx-copybutton>=0.5.2",
    "myst-parser>=4.0.0",
    "sphinx-design>=0.6.1",
    "sphinxcontrib-mermaid>=1.0.0",
    "sphinx-autobuild>=2025.1.17",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build docs docs/_build/html"
live = "sphinx-autobuild docs docs/_build/html --open-browser"
clean = "rm -rf docs/_build docs/api/generated"
apidoc = "sphinx-apidoc -o docs/api/generated src/qtframework --force --module-first --separate"

# Sphinx configuration via sphinx-pyproject
[tool.sphinx-pyproject]
# General configuration
master_doc = "index"
language = "en"
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]
nitpicky = true
keep_warnings = false

# Extensions
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.viewcode",
    "sphinx.ext.napoleon",
    "sphinx.ext.intersphinx",
    "sphinx.ext.todo",
    "sphinx_autodoc_typehints",
    "sphinx_copybutton",
    "myst_parser",
    "sphinx_design",
    "sphinxcontrib.mermaid",
]

# HTML output options
html_theme = "furo"
html_static_path = ["_static"]
templates_path = ["_templates"]
html_title = "QT Framework Documentation"
html_short_title = "QT Framework"
html_logo = ""
html_favicon = ""
html_show_sourcelink = true
html_show_sphinx = false
html_show_copyright = true

# Theme options are moved to conf.py to allow dynamic theme color references

# Autodoc configuration
[tool.sphinx-pyproject.autodoc_default_options]
members = true
member-order = "bysource"
special-members = "__init__"
undoc-members = true
exclude-members = "__weakref__"
show-inheritance = true

# Additional autodoc settings
autodoc_typehints = "both"
autodoc_typehints_format = "short"
autodoc_class_signature = "separated"
autodoc_preserve_defaults = true

# Napoleon settings (Google/NumPy style docstrings)
napoleon_google_docstring = true
napoleon_numpy_docstring = true
napoleon_include_init_with_doc = false
napoleon_include_private_with_doc = false
napoleon_include_special_with_doc = true
napoleon_use_admonition_for_examples = false
napoleon_use_admonition_for_notes = false
napoleon_use_admonition_for_references = false
napoleon_use_ivar = false
napoleon_use_param = true
napoleon_use_rtype = true
napoleon_preprocess_types = false

# MyST (Markdown) parser
myst_enable_extensions = [
    "deflist",
    "tasklist",
    "html_image",
    "colon_fence",
    "smartquotes",
    "replacements",
    "linkify",
    "strikethrough",
]
myst_heading_anchors = 3

# Intersphinx mapping moved to conf.py due to format requirements

# Sphinx copybutton
copybutton_prompt_text = ">>> |\\.\\.\\. |\\$ "
copybutton_prompt_is_regexp = true
copybutton_line_continuation_character = "\\"

# Mermaid diagrams
mermaid_version = "10.6.1"
mermaid_init_js = "mermaid.initialize({startOnLoad:true, theme: 'default'});"

# Todo extension
todo_include_todos = true
todo_emit_warnings = true

[tool.markdownlint]
default = true
MD013 = false  # Line length
MD024 = false  # Multiple headings with the same content
MD033 = false  # Inline HTML
MD040 = false  # Fenced code blocks should have a language specified
MD041 = false  # First line in file should be a top level heading
