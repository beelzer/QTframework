name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: üîç Ruff
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install ruff
        run: uv pip install ruff --system

      - name: Run ruff linting
        run: |
          echo "::group::Ruff Check"
          ruff check src tests examples scripts --output-format=github
          echo "::endgroup::"

      - name: Run ruff format check
        run: |
          echo "::group::Ruff Format"
          python .github/scripts/ruff_format_annotate.py
          echo "::endgroup::"

  actionlint:
    name: ‚öôÔ∏è Actionlint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run actionlint
        uses: raven-actions/actionlint@v2
        with:
          fail-on-error: true

  codespell:
    name: üìù Codespell
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run codespell
        uses: codespell-project/actions-codespell@v2
        with:
          skip: "*.lock,package-lock.json,yarn.lock,.git,*.min.js,*.min.css,*.po,*.pot"

  validate-config:
    name: ‚úÖ Validate Config
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install validate-pyproject
        run: pip install validate-pyproject

      - name: Validate pyproject.toml
        run: validate-pyproject pyproject.toml

  detect-secrets:
    name: üîê Detect Secrets
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install detect-secrets
        run: pip install detect-secrets

      - name: Run detect-secrets
        run: detect-secrets scan --baseline .secrets.baseline

  pyupgrade:
    name: ‚¨ÜÔ∏è Pyupgrade
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install pyupgrade
        run: pip install pyupgrade

      - name: Run pyupgrade
        run: |
          # Find all Python files and check them with pyupgrade
          find src tests examples scripts -name "*.py" -type f -exec pyupgrade --py313-plus {} +

  prettier:
    name: üíÖ Prettier
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run prettier
        run: |
          npm install -g prettier@3.4.2 prettier-plugin-toml
          prettier --check "**/*.{json,yaml,yml,md}" --ignore-path .gitignore

  markdownlint:
    name: üìÑ Markdownlint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run markdownlint
        run: |
          npm install -g markdownlint-cli
          markdownlint . --config pyproject.toml --configPointer /tool/markdownlint --ignore node_modules

  type-check:
    name: üîé Mypy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install mypy and dependencies
        run: |
          uv pip install mypy --system
          uv pip install -e ".[dev]" --system

      - name: Run type checking
        run: |
          echo "::group::Mypy Type Check"
          python .github/scripts/mypy_annotate.py
          echo "::endgroup::"

  test:
    name: ${{ matrix.os == 'ubuntu-latest' && 'üêß' || matrix.os == 'windows-latest' && 'ü™ü' || 'üçé' }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs:
      [
        lint,
        actionlint,
        codespell,
        validate-config,
        detect-secrets,
        pyupgrade,
        prettier,
        markdownlint,
        type-check,
      ]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: "3.13"
          install-type: "dev"

      - name: Configure Windows Defender exclusions (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Exclude Python and workspace from Defender scanning for speed
          Add-MpPreference -ExclusionPath "$env:pythonLocation"
          Add-MpPreference -ExclusionPath "${{ github.workspace }}"

      - name: Setup display for GUI tests (Linux)
        if: runner.os == 'Linux'
        run: |
          export DISPLAY=:99
          sudo Xvfb :99 -screen 0 1920x1080x24 &
          sleep 3

      - name: Run tests
        env:
          QT_QPA_PLATFORM: offscreen
          DISPLAY: ${{ runner.os == 'Linux' && ':99' || '' }}
          PYTHONDONTWRITEBYTECODE: 1
        run: |
          python .github/scripts/pytest_annotate.py tests/ -v

  coverage:
    name: üìä Test Coverage
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        actionlint,
        codespell,
        validate-config,
        detect-secrets,
        pyupgrade,
        prettier,
        markdownlint,
        type-check,
      ]
    outputs:
      coverage_percentage: ${{ steps.coverage.outputs.coverage_percentage }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: "3.13"
          install-type: "dev"

      - name: Setup display for GUI tests
        run: |
          export DISPLAY=:99
          sudo Xvfb :99 -screen 0 1920x1080x24 &
          sleep 3

      - name: Run tests with coverage
        id: coverage
        env:
          QT_QPA_PLATFORM: offscreen
          DISPLAY: :99
        run: |
          # Run tests and capture output to file while streaming to console
          pytest tests/ -v --cov=src/qtframework --cov-report=xml --cov-report=term --cov-report=html 2>&1 | tee coverage_output.txt

          # Extract coverage percentage from output file
          coverage_pct=$(grep -oP 'TOTAL\s+\d+\s+\d+\s+\d+\s+\d+\s+\K\d+(?=%)' coverage_output.txt || echo "0")
          echo "coverage_percentage=$coverage_pct" >> "$GITHUB_OUTPUT"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30

  report:
    name: üìã CI Summary
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        actionlint,
        codespell,
        validate-config,
        detect-secrets,
        pyupgrade,
        prettier,
        markdownlint,
        type-check,
        test,
        coverage,
      ]
    if: always()

    steps:
      - name: Generate CI summary
        shell: bash
        run: |
          # Helper function to get status emoji
          get_status_emoji() {
            case "$1" in
              success) echo "‚úÖ" ;;
              failure) echo "‚ùå" ;;
              cancelled) echo "üö´" ;;
              skipped) echo "‚è≠Ô∏è" ;;
              *) echo "‚ùì" ;;
            esac
          }

          # Helper function to get status badge
          get_status_badge() {
            case "$1" in
              success) echo "<img src=\"https://img.shields.io/badge/status-passed-brightgreen\" alt=\"success\" />" ;;
              failure) echo "<img src=\"https://img.shields.io/badge/status-failed-red\" alt=\"failure\" />" ;;
              cancelled) echo "<img src=\"https://img.shields.io/badge/status-cancelled-orange\" alt=\"cancelled\" />" ;;
              skipped) echo "<img src=\"https://img.shields.io/badge/status-skipped-lightgrey\" alt=\"skipped\" />" ;;
              *) echo "<img src=\"https://img.shields.io/badge/status-unknown-lightgrey\" alt=\"unknown\" />" ;;
            esac
          }

          # Calculate overall status
          all_passed=true
          [ "${{ needs.lint.result }}" != "success" ] && all_passed=false
          [ "${{ needs.actionlint.result }}" != "success" ] && all_passed=false
          [ "${{ needs.codespell.result }}" != "success" ] && all_passed=false
          [ "${{ needs.validate-config.result }}" != "success" ] && all_passed=false
          [ "${{ needs.detect-secrets.result }}" != "success" ] && all_passed=false
          [ "${{ needs.pyupgrade.result }}" != "success" ] && all_passed=false
          [ "${{ needs.prettier.result }}" != "success" ] && all_passed=false
          [ "${{ needs.markdownlint.result }}" != "success" ] && all_passed=false
          [ "${{ needs.type-check.result }}" != "success" ] && all_passed=false
          [ "${{ needs.test.result }}" != "success" ] && all_passed=false
          [ "${{ needs.coverage.result }}" != "success" ] && all_passed=false

          {
            echo "# üöÄ CI Pipeline Results"
            echo ""

            if [ "$all_passed" = true ]; then
              echo "## ‚ú® All Checks Passed!"
              echo ""
              echo "> **Build Status:** üü¢ Ready to merge"
            else
              echo "## ‚ö†Ô∏è Issues Detected"
              echo ""
              echo "> **Build Status:** üî¥ Requires attention"
            fi

            echo ""
            echo "---"
            echo ""
            echo "## üìã Results"
            echo ""
            echo "<table>"
            echo "<tr><td><strong>Code Quality</strong></td><td></td></tr>"
            echo "<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;üîç Ruff Linting</td><td align=\"center\">$(get_status_badge "${{ needs.lint.result }}")</td></tr>"
            echo "<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;üîé Type Checking</td><td align=\"center\">$(get_status_badge "${{ needs.type-check.result }}")</td></tr>"
            echo "<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;‚¨ÜÔ∏è Python Syntax</td><td align=\"center\">$(get_status_badge "${{ needs.pyupgrade.result }}")</td></tr>"
            echo "<tr><td><strong>Security</strong></td><td></td></tr>"
            echo "<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;üîê Detect Secrets</td><td align=\"center\">$(get_status_badge "${{ needs.detect-secrets.result }}")</td></tr>"
            echo "<tr><td><strong>Validation</strong></td><td></td></tr>"
            echo "<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;‚öôÔ∏è Actionlint</td><td align=\"center\">$(get_status_badge "${{ needs.actionlint.result }}")</td></tr>"
            echo "<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;üìù Codespell</td><td align=\"center\">$(get_status_badge "${{ needs.codespell.result }}")</td></tr>"
            echo "<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;‚úÖ Config Validation</td><td align=\"center\">$(get_status_badge "${{ needs.validate-config.result }}")</td></tr>"
            echo "<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;üíÖ Prettier</td><td align=\"center\">$(get_status_badge "${{ needs.prettier.result }}")</td></tr>"
            echo "<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;üìÑ Markdownlint</td><td align=\"center\">$(get_status_badge "${{ needs.markdownlint.result }}")</td></tr>"
            echo "<tr><td><strong>Testing</strong></td><td></td></tr>"
            echo "<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;üß™ Cross-Platform Tests</td><td align=\"center\">$(get_status_badge "${{ needs.test.result }}")</td></tr>"
            echo "<tr><td><strong>Coverage</strong></td><td></td></tr>"

            coverage_pct="${{ needs.coverage.outputs.coverage_percentage || '0' }}"
            if [ -n "$coverage_pct" ] && [ "$coverage_pct" != "0" ]; then
              echo "<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;üìä Test Coverage (${coverage_pct}%)</td><td align=\"center\">$(get_status_badge "${{ needs.coverage.result }}")</td></tr>"
            else
              echo "<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;üìä Test Coverage</td><td align=\"center\">$(get_status_badge "${{ needs.coverage.result }}")</td></tr>"
            fi
            echo "</table>"
            echo ""

            echo "---"
            echo ""
            echo "<sub>Generated at $(date -u '+%Y-%m-%d %H:%M:%S UTC') ‚Ä¢ Commit: \`${GITHUB_SHA:0:7}\`</sub>"
          } >> "$GITHUB_STEP_SUMMARY"
