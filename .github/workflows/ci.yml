name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Ruff (Lint, Format, Security)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install ruff
        run: uv pip install ruff --system

      - name: Run ruff linting
        run: |
          echo "::group::Ruff Check"
          ruff check src tests examples scripts --output-format=github
          echo "::endgroup::"

      - name: Run ruff format check
        run: |
          echo "::group::Ruff Format"
          python .github/scripts/ruff_format_annotate.py
          echo "::endgroup::"

  actionlint:
    name: Actionlint (Workflow Validation)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run actionlint
        uses: raven-actions/actionlint@v2
        with:
          fail-on-error: true

  codespell:
    name: Codespell (Spell Checking)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run codespell
        uses: codespell-project/actions-codespell@v2
        with:
          skip: "*.lock,package-lock.json,yarn.lock,.git,*.min.js,*.min.css,*.po,*.pot"

  validate-config:
    name: Validate Config
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install validate-pyproject
        run: pip install validate-pyproject

      - name: Validate pyproject.toml
        run: validate-pyproject pyproject.toml

  type-check:
    name: Mypy (Type Checking)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install mypy and dependencies
        run: |
          uv pip install mypy --system
          uv pip install -e ".[dev]" --system

      - name: Run type checking
        run: |
          echo "::group::Mypy Type Check"
          python .github/scripts/mypy_annotate.py
          echo "::endgroup::"

  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [lint, actionlint, codespell, validate-config, type-check]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: "3.13"
          install-type: "dev"

      - name: Setup display for GUI tests (Linux)
        if: runner.os == 'Linux'
        run: |
          export DISPLAY=:99
          sudo Xvfb :99 -screen 0 1920x1080x24 &
          sleep 3

      - name: Run tests
        env:
          QT_QPA_PLATFORM: offscreen
          DISPLAY: ${{ runner.os == 'Linux' && ':99' || '' }}
        run: |
          python .github/scripts/pytest_annotate.py tests/ -v

      - name: Generate test summary
        if: always()
        shell: bash
        run: |
          echo "## Test Results - ${{ matrix.os }}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**Platform:** ${{ matrix.os }}" >> "$GITHUB_STEP_SUMMARY"
          echo "**Python Version:** 3.13" >> "$GITHUB_STEP_SUMMARY"

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: [lint, actionlint, codespell, validate-config, type-check]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: "3.13"
          install-type: "dev"

      - name: Setup display for GUI tests
        run: |
          export DISPLAY=:99
          sudo Xvfb :99 -screen 0 1920x1080x24 &
          sleep 3

      - name: Run tests with coverage
        env:
          QT_QPA_PLATFORM: offscreen
          DISPLAY: :99
        run: |
          pytest tests/ -v --cov=src/qtframework --cov-report=xml --cov-report=term --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30

      - name: Generate coverage summary
        if: always()
        shell: bash
        run: |
          echo "## Coverage Report" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          if [ -f "htmlcov/index.html" ]; then
            echo "âœ… Coverage report generated successfully" >> "$GITHUB_STEP_SUMMARY"
          fi
