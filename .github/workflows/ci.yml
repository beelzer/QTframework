name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: 🔍 Ruff
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install ruff
        run: uv pip install ruff --system

      - name: Run ruff linting
        run: |
          echo "::group::Ruff Check"
          ruff check src tests examples scripts --output-format=github
          echo "::endgroup::"

      - name: Run ruff format check
        run: |
          echo "::group::Ruff Format"
          python .github/scripts/ruff_format_annotate.py
          echo "::endgroup::"

  actionlint:
    name: ⚙️ Actionlint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run actionlint
        uses: raven-actions/actionlint@v2
        with:
          fail-on-error: true

  codespell:
    name: 📝 Codespell
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run codespell
        uses: codespell-project/actions-codespell@v2
        with:
          skip: "*.lock,package-lock.json,yarn.lock,.git,*.min.js,*.min.css,*.po,*.pot"

  validate-config:
    name: ✅ Validate Config
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install validate-pyproject
        run: pip install validate-pyproject

      - name: Validate pyproject.toml
        run: validate-pyproject pyproject.toml

  markdownlint:
    name: 📄 Markdownlint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run markdownlint
        uses: nosborn/github-action-markdown-cli@v3.3.0
        with:
          files: .
          config_file: .markdownlint.yaml
          ignore_files: node_modules/
          ignore_path: .gitignore
          rules: "~MD013,~MD024,~MD033,~MD041"

  type-check:
    name: 🔎 Mypy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install mypy and dependencies
        run: |
          uv pip install mypy --system
          uv pip install -e ".[dev]" --system

      - name: Run type checking
        run: |
          echo "::group::Mypy Type Check"
          python .github/scripts/mypy_annotate.py
          echo "::endgroup::"

  test:
    name: ${{ matrix.os == 'ubuntu-latest' && '🐧' || matrix.os == 'windows-latest' && '🪟' || '🍎' }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs:
      [lint, actionlint, codespell, validate-config, markdownlint, type-check]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: "3.13"
          install-type: "dev"

      - name: Setup display for GUI tests (Linux)
        if: runner.os == 'Linux'
        run: |
          export DISPLAY=:99
          sudo Xvfb :99 -screen 0 1920x1080x24 &
          sleep 3

      - name: Run tests
        env:
          QT_QPA_PLATFORM: offscreen
          DISPLAY: ${{ runner.os == 'Linux' && ':99' || '' }}
        run: |
          python .github/scripts/pytest_annotate.py tests/ -v

  coverage:
    name: 📊 Test Coverage
    runs-on: ubuntu-latest
    needs:
      [lint, actionlint, codespell, validate-config, markdownlint, type-check]
    outputs:
      coverage_percentage: ${{ steps.coverage.outputs.coverage_percentage }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: "3.13"
          install-type: "dev"

      - name: Setup display for GUI tests
        run: |
          export DISPLAY=:99
          sudo Xvfb :99 -screen 0 1920x1080x24 &
          sleep 3

      - name: Run tests with coverage
        id: coverage
        env:
          QT_QPA_PLATFORM: offscreen
          DISPLAY: :99
        run: |
          coverage_output=$(pytest tests/ -v --cov=src/qtframework --cov-report=xml --cov-report=term --cov-report=html 2>&1)
          echo "$coverage_output"

          # Extract coverage percentage
          coverage_pct=$(echo "$coverage_output" | grep -oP 'TOTAL\s+\d+\s+\d+\s+\d+\s+\d+\s+\K\d+(?=%)' || echo "0")
          echo "coverage_percentage=$coverage_pct" >> "$GITHUB_OUTPUT"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30

  report:
    name: 📋 CI Summary
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        actionlint,
        codespell,
        validate-config,
        markdownlint,
        type-check,
        test,
        coverage,
      ]
    if: always()

    steps:
      - name: Generate CI summary
        shell: bash
        run: |
          # Helper function to get status emoji
          get_status_emoji() {
            case "$1" in
              success) echo "✅" ;;
              failure) echo "❌" ;;
              cancelled) echo "🚫" ;;
              skipped) echo "⏭️" ;;
              *) echo "❓" ;;
            esac
          }

          # Helper function to get status badge
          get_status_badge() {
            case "$1" in
              success) echo "![success](https://img.shields.io/badge/status-passed-brightgreen)" ;;
              failure) echo "![failure](https://img.shields.io/badge/status-failed-red)" ;;
              cancelled) echo "![cancelled](https://img.shields.io/badge/status-cancelled-orange)" ;;
              skipped) echo "![skipped](https://img.shields.io/badge/status-skipped-lightgrey)" ;;
              *) echo "![unknown](https://img.shields.io/badge/status-unknown-lightgrey)" ;;
            esac
          }

          # Calculate overall status
          all_passed=true
          [ "${{ needs.lint.result }}" != "success" ] && all_passed=false
          [ "${{ needs.actionlint.result }}" != "success" ] && all_passed=false
          [ "${{ needs.codespell.result }}" != "success" ] && all_passed=false
          [ "${{ needs.validate-config.result }}" != "success" ] && all_passed=false
          [ "${{ needs.markdownlint.result }}" != "success" ] && all_passed=false
          [ "${{ needs.type-check.result }}" != "success" ] && all_passed=false
          [ "${{ needs.test.result }}" != "success" ] && all_passed=false
          [ "${{ needs.coverage.result }}" != "success" ] && all_passed=false

          {
            echo "# 🚀 CI Pipeline Results"
            echo ""

            if [ "$all_passed" = true ]; then
              echo "## ✨ All Checks Passed!"
              echo ""
              echo "> **Build Status:** 🟢 Ready to merge"
            else
              echo "## ⚠️ Issues Detected"
              echo ""
              echo "> **Build Status:** 🔴 Requires attention"
            fi

            echo ""
            echo "---"
            echo ""

            echo "### 🔍 Code Quality"
            echo ""
            echo "| Check | Status |"
            echo "|-------|--------|"
            echo "| 🔍 **Ruff Linting** | $(get_status_badge "${{ needs.lint.result }}") |"
            echo "| 🔎 **Type Checking** | $(get_status_badge "${{ needs.type-check.result }}") |"
            echo ""

            echo "### ✅ Validation"
            echo ""
            echo "| Check | Status |"
            echo "|-------|--------|"
            echo "| ⚙️ **Actionlint** | $(get_status_badge "${{ needs.actionlint.result }}") |"
            echo "| 📝 **Codespell** | $(get_status_badge "${{ needs.codespell.result }}") |"
            echo "| ✅ **Config Validation** | $(get_status_badge "${{ needs.validate-config.result }}") |"
            echo "| 📄 **Markdownlint** | $(get_status_badge "${{ needs.markdownlint.result }}") |"
            echo ""

            echo "### 🧪 Testing"
            echo ""
            echo "| Platform | Status |"
            echo "|----------|--------|"
            echo "| 🐧 **Ubuntu** | $(get_status_badge "${{ needs.test.result }}") |"
            echo "| 🪟 **Windows** | $(get_status_badge "${{ needs.test.result }}") |"
            echo "| 🍎 **macOS** | $(get_status_badge "${{ needs.test.result }}") |"
            echo ""

            echo "### 📊 Coverage"
            echo ""
            coverage_pct="${{ needs.coverage.outputs.coverage_percentage || '0' }}"
            if [ -n "$coverage_pct" ] && [ "$coverage_pct" != "0" ]; then
              echo "| Metric | Value |"
              echo "|--------|-------|"
              echo "| **Status** | $(get_status_badge "${{ needs.coverage.result }}") |"
              echo "| **Coverage** | \`${coverage_pct}%\` |"
            else
              echo "| Metric | Value |"
              echo "|--------|-------|"
              echo "| **Status** | $(get_status_badge "${{ needs.coverage.result }}") |"
            fi
            echo ""

            echo "---"
            echo ""
            echo "<sub>Generated at $(date -u '+%Y-%m-%d %H:%M:%S UTC') • Commit: \`${GITHUB_SHA:0:7}\`</sub>"
          } >> "$GITHUB_STEP_SUMMARY"
